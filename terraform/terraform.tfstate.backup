{
  "version": 4,
  "terraform_version": "1.2.3",
  "serial": 304,
  "lineage": "68082f85-f99a-958a-e760-51f292eb5e53",
  "outputs": {
    "admin_mongodb": {
      "value": "18.220.249.0",
      "type": "string"
    },
    "admin_mysql": {
      "value": "18.216.164.92",
      "type": "string"
    },
    "admin_tidb": {
      "value": "13.58.155.92",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "grafana_server",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-00978328f54e31526",
            "arn": "arn:aws:ec2:us-east-2:138027622121:instance/i-022caa083aa09af39",
            "associate_public_ip_address": true,
            "availability_zone": "us-east-2b",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 2,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 150,
                "kms_key_id": "",
                "snapshot_id": "",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-09836dcdd302ae237",
                "volume_size": 50,
                "volume_type": "gp2"
              }
            ],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "",
            "id": "i-022caa083aa09af39",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t2.medium",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "admin_aws",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": null,
            "primary_network_interface_id": "eni-00d0c954ff28ceba9",
            "private_dns": "ip-172-31-19-201.us-east-2.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "172.31.19.201",
            "public_dns": "ec2-3-133-97-51.us-east-2.compute.amazonaws.com",
            "public_ip": "3.133.97.51",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 150,
                "kms_key_id": "",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-09836dcdd302ae237",
                "volume_size": 50,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "launch-wizard-10"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-d233d5af",
            "tags": {
              "Name": "grafana_server"
            },
            "tags_all": {
              "Name": "grafana_server"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": null,
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "launch-wizard-10"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "mongodb",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-00978328f54e31526",
            "arn": "arn:aws:ec2:us-east-2:138027622121:instance/i-0c2709224327c1428",
            "associate_public_ip_address": true,
            "availability_zone": "us-east-2b",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 2,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "",
            "id": "i-0c2709224327c1428",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t2.medium",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "admin_aws",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": null,
            "primary_network_interface_id": "eni-067f7a0a1904a6339",
            "private_dns": "ip-172-31-30-8.us-east-2.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "172.31.30.8",
            "public_dns": "ec2-18-220-249-0.us-east-2.compute.amazonaws.com",
            "public_ip": "18.220.249.0",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 100,
                "kms_key_id": "",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-092d81ec72b0f0df9",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "launch-wizard-10"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-d233d5af",
            "tags": {
              "Name": "mongodb"
            },
            "tags_all": {
              "Name": "mongodb"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": null,
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "launch-wizard-10"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "monitor_server",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-00978328f54e31526",
            "arn": "arn:aws:ec2:us-east-2:138027622121:instance/i-00f99502a407e4dbc",
            "associate_public_ip_address": true,
            "availability_zone": "us-east-2b",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 2,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 150,
                "kms_key_id": "",
                "snapshot_id": "",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-0447f226d9032a2a3",
                "volume_size": 50,
                "volume_type": "gp2"
              }
            ],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "",
            "id": "i-00f99502a407e4dbc",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t2.medium",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "admin_aws",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": null,
            "primary_network_interface_id": "eni-0c9a55995cecb8963",
            "private_dns": "ip-172-31-17-249.us-east-2.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "172.31.17.249",
            "public_dns": "ec2-52-14-33-84.us-east-2.compute.amazonaws.com",
            "public_ip": "52.14.33.84",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 150,
                "kms_key_id": "",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-0447f226d9032a2a3",
                "volume_size": 50,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "launch-wizard-10"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-d233d5af",
            "tags": {
              "Name": "monitor_server"
            },
            "tags_all": {
              "Name": "monitor_server"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": null,
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "launch-wizard-10"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "mysql",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-00978328f54e31526",
            "arn": "arn:aws:ec2:us-east-2:138027622121:instance/i-0183c372694472c04",
            "associate_public_ip_address": true,
            "availability_zone": "us-east-2b",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 2,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "",
            "id": "i-0183c372694472c04",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t2.medium",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "admin_aws",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": null,
            "primary_network_interface_id": "eni-0ace8d036691bddb2",
            "private_dns": "ip-172-31-31-204.us-east-2.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "172.31.31.204",
            "public_dns": "ec2-18-216-164-92.us-east-2.compute.amazonaws.com",
            "public_ip": "18.216.164.92",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 100,
                "kms_key_id": "",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-047a6b8c5ceac02eb",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "launch-wizard-10"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-d233d5af",
            "tags": {
              "Name": "mysql"
            },
            "tags_all": {
              "Name": "mysql"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": null,
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "launch-wizard-10"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "pd_server",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-00978328f54e31526",
            "arn": "arn:aws:ec2:us-east-2:138027622121:instance/i-029930b770c9fcfad",
            "associate_public_ip_address": true,
            "availability_zone": "us-east-2b",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 2,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 150,
                "kms_key_id": "",
                "snapshot_id": "",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-0d1106aebc16c7c96",
                "volume_size": 50,
                "volume_type": "gp2"
              }
            ],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "",
            "id": "i-029930b770c9fcfad",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t2.medium",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "admin_aws",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": null,
            "primary_network_interface_id": "eni-0fd9dd23cb61f9c48",
            "private_dns": "ip-172-31-17-198.us-east-2.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "172.31.17.198",
            "public_dns": "ec2-18-218-198-1.us-east-2.compute.amazonaws.com",
            "public_ip": "18.218.198.1",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 150,
                "kms_key_id": "",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-0d1106aebc16c7c96",
                "volume_size": 50,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "launch-wizard-10"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-d233d5af",
            "tags": {
              "Name": "pd_server"
            },
            "tags_all": {
              "Name": "pd_server"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": null,
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "launch-wizard-10"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "tidb",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-00978328f54e31526",
            "arn": "arn:aws:ec2:us-east-2:138027622121:instance/i-003ecdbd4ce87ad61",
            "associate_public_ip_address": true,
            "availability_zone": "us-east-2b",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 2,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "",
            "id": "i-003ecdbd4ce87ad61",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t2.medium",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "admin_aws",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": null,
            "primary_network_interface_id": "eni-0537622d2d53be7b8",
            "private_dns": "ip-172-31-17-120.us-east-2.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "172.31.17.120",
            "public_dns": "ec2-13-58-155-92.us-east-2.compute.amazonaws.com",
            "public_ip": "13.58.155.92",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 100,
                "kms_key_id": "",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-009cc399b2297f238",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "launch-wizard-10"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-d233d5af",
            "tags": {
              "Name": "tidb"
            },
            "tags_all": {
              "Name": "tidb"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": null,
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "launch-wizard-10"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "tidb_server",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-00978328f54e31526",
            "arn": "arn:aws:ec2:us-east-2:138027622121:instance/i-0fb0f93ff8c88fbc9",
            "associate_public_ip_address": true,
            "availability_zone": "us-east-2b",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 2,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 150,
                "kms_key_id": "",
                "snapshot_id": "",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-0edf63f03cd0b3324",
                "volume_size": 50,
                "volume_type": "gp2"
              }
            ],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "",
            "id": "i-0fb0f93ff8c88fbc9",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t2.medium",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "admin_aws",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": null,
            "primary_network_interface_id": "eni-0b548bc9a9297bce5",
            "private_dns": "ip-172-31-26-32.us-east-2.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "172.31.26.32",
            "public_dns": "ec2-3-21-19-201.us-east-2.compute.amazonaws.com",
            "public_ip": "3.21.19.201",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 150,
                "kms_key_id": "",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-0edf63f03cd0b3324",
                "volume_size": 50,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "launch-wizard-10"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-d233d5af",
            "tags": {
              "Name": "tidb_server"
            },
            "tags_all": {
              "Name": "tidb_server"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": null,
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "launch-wizard-10"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "tikv_server",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-00978328f54e31526",
            "arn": "arn:aws:ec2:us-east-2:138027622121:instance/i-07cb1b18d9ff267f0",
            "associate_public_ip_address": true,
            "availability_zone": "us-east-2b",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 2,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 150,
                "kms_key_id": "",
                "snapshot_id": "",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-072613b44e3fb1e85",
                "volume_size": 50,
                "volume_type": "gp2"
              }
            ],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "",
            "id": "i-07cb1b18d9ff267f0",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t2.medium",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "admin_aws",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": null,
            "primary_network_interface_id": "eni-05c844fc67cb25ebf",
            "private_dns": "ip-172-31-17-94.us-east-2.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "172.31.17.94",
            "public_dns": "ec2-18-117-245-164.us-east-2.compute.amazonaws.com",
            "public_ip": "18.117.245.164",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 150,
                "kms_key_id": "",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-072613b44e3fb1e85",
                "volume_size": 50,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "launch-wizard-10"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-d233d5af",
            "tags": {
              "Name": "tikv_server"
            },
            "tags_all": {
              "Name": "tikv_server"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": null,
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "launch-wizard-10"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "ansible_hosts_file",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "[mysql]\n18.216.164.92\n\n[mongodb]\n18.220.249.0\n\n[tidb]\n13.58.155.92\n\n[tidb_machines]\n18.218.198.1\n3.21.19.201\n18.117.245.164\n52.14.33.84\n3.133.97.51\n\n[mysql:vars]\nansible_user = ubuntu\nansible_ssh_private_key_file = /etc/ansible/admin_aws.pem\nansible_python_interpreter = /usr/bin/python3\nansible_ssh_common_args='-o StrictHostKeyChecking=no'\n\n[mongodb:vars]\nansible_user = ubuntu\nansible_ssh_private_key_file = /etc/ansible/admin_aws.pem\nansible_python_interpreter = /usr/bin/python3\nansible_ssh_common_args='-o StrictHostKeyChecking=no'\n\n[tidb:vars]\nansible_user = ubuntu\nansible_ssh_private_key_file = /etc/ansible/admin_aws.pem\nansible_python_interpreter = /usr/bin/python3\nansible_ssh_common_args='-o StrictHostKeyChecking=no'\n\n[tidb_machines:vars]\nansible_user = ubuntu\nansible_ssh_private_key_file = /etc/ansible/admin_aws.pem\nansible_python_interpreter = /usr/bin/python3\nansible_ssh_common_args='-o StrictHostKeyChecking=no'\n",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "/etc/ansible/hosts",
            "id": "10a0b1135b054e6a05a2558093b22a5bffdb530c",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_instance.grafana_server",
            "aws_instance.mongodb",
            "aws_instance.monitor_server",
            "aws_instance.mysql",
            "aws_instance.pd_server",
            "aws_instance.tidb",
            "aws_instance.tidb_server",
            "aws_instance.tikv_server"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "mongodb_config_file",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "mongodb-host=localhost\nmongodb-port=27017\nmongodb-db=mongodb_test\nrand-type=pareto\ntime=600\nthreads=128\nreport-interval=10",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "/home/jpi/proyecto_tesis/ansible/mongodb_config",
            "id": "92aca89440a72f5985075b655a56ea2d39b43ac1",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_instance.tidb_server"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "mysql_config_file",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "mysql-host=localhost\nmysql-port=3306\nmysql-user=juan\nmysql-password=test\nmysql-db=mysql_test\ntime=600\nthreads=128\nreport-interval=10\ndb-driver=mysql",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "/home/jpi/proyecto_tesis/ansible/mysql_config",
            "id": "5d1fb33deb6b534bca577acb4efa7b8118c50e49",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_instance.tidb_server"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "oltp_common_file",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "-- Copyright (C) 2006-2018 Alexey Kopytov \u003cakopytov@gmail.com\u003e\n\n-- This program is free software; you can redistribute it and/or modify\n-- it under the terms of the GNU General Public License as published by\n-- the Free Software Foundation; either version 2 of the License, or\n-- (at your option) any later version.\n\n-- This program is distributed in the hope that it will be useful,\n-- but WITHOUT ANY WARRANTY; without even the implied warranty of\n-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-- GNU General Public License for more details.\n\n-- You should have received a copy of the GNU General Public License\n-- along with this program; if not, write to the Free Software\n-- Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n\n-- -----------------------------------------------------------------------------\n-- Common code for OLTP benchmarks.\n-- -----------------------------------------------------------------------------\n\nfunction init()\n    assert(event ~= nil,\n           \"this script is meant to be included by other OLTP scripts and \" ..\n              \"should not be called directly.\")\n end\n \n if sysbench.cmdline.command == nil then\n    error(\"Command is required. Supported commands: prepare, prewarm, run, \" ..\n             \"cleanup, help\")\n end\n \n -- Command line options\n sysbench.cmdline.options = {\n    table_size =\n       {\"Number of rows per table\", 10000},\n    range_size =\n       {\"Range size for range SELECT queries\", 100},\n    tables =\n       {\"Number of tables\", 1},\n    point_selects =\n       {\"Number of point SELECT queries per transaction\", 10},\n    simple_ranges =\n       {\"Number of simple range SELECT queries per transaction\", 1},\n    sum_ranges =\n       {\"Number of SELECT SUM() queries per transaction\", 1},\n    order_ranges =\n       {\"Number of SELECT ORDER BY queries per transaction\", 1},\n    distinct_ranges =\n       {\"Number of SELECT DISTINCT queries per transaction\", 1},\n    index_updates =\n       {\"Number of UPDATE index queries per transaction\", 1},\n    non_index_updates =\n       {\"Number of UPDATE non-index queries per transaction\", 1},\n    delete_inserts =\n       {\"Number of DELETE/INSERT combinations per transaction\", 1},\n    range_selects =\n       {\"Enable/disable all range SELECT queries\", true},\n    auto_inc =\n    {\"Use AUTO_INCREMENT column as Primary Key (for MySQL), \" ..\n        \"or its alternatives in other DBMS. When disabled, use \" ..\n        \"client-generated IDs\", true},\n    skip_trx =\n       {\"Don't start explicit transactions and execute all queries \" ..\n           \"in the AUTOCOMMIT mode\", false},\n    secondary =\n       {\"Use a secondary index in place of the PRIMARY KEY\", false},\n    create_secondary =\n       {\"Create a secondary index in addition to the PRIMARY KEY\", true},\n    mysql_storage_engine =\n       {\"Storage engine, if MySQL is used\", \"innodb\"},\n    pgsql_variant =\n       {\"Use this PostgreSQL variant when running with the \" ..\n           \"PostgreSQL driver. The only currently supported \" ..\n           \"variant is 'redshift'. When enabled, \" ..\n           \"create_secondary is automatically disabled, and \" ..\n           \"delete_inserts is set to 0\"}\n }\n \n -- Prepare the dataset. This command supports parallel execution, i.e. will\n -- benefit from executing with --threads \u003e 1 as long as --tables \u003e 1\n function cmd_prepare()\n    local drv = sysbench.sql.driver()\n    local con = drv:connect()\n \n    for i = sysbench.tid % sysbench.opt.threads + 1, sysbench.opt.tables,\n    sysbench.opt.threads do\n      create_table(drv, con, i)\n    end\n end\n \n -- Preload the dataset into the server cache. This command supports parallel\n -- execution, i.e. will benefit from executing with --threads \u003e 1 as long as\n -- --tables \u003e 1\n --\n -- PS. Currently, this command is only meaningful for MySQL/InnoDB benchmarks\n function cmd_prewarm()\n    local drv = sysbench.sql.driver()\n    local con = drv:connect()\n \n    assert(drv:name() == \"mysql\", \"prewarm is currently MySQL only\")\n \n    -- Do not create on disk tables for subsequent queries\n    con:query(\"SET tmp_table_size=2*1024*1024*1024\")\n    con:query(\"SET max_heap_table_size=2*1024*1024*1024\")\n \n    for i = sysbench.tid % sysbench.opt.threads + 1, sysbench.opt.tables,\n    sysbench.opt.threads do\n       local t = \"sbtest\" .. i\n       print(\"Prewarming table \" .. t)\n       con:query(\"ANALYZE TABLE sbtest\" .. i)\n       con:query(string.format(\n                    \"SELECT AVG(id) FROM \" ..\n                       \"(SELECT * FROM %s FORCE KEY (PRIMARY) \" ..\n                       \"LIMIT %u) t\",\n                    t, sysbench.opt.table_size))\n       con:query(string.format(\n                    \"SELECT COUNT(*) FROM \" ..\n                       \"(SELECT * FROM %s WHERE k LIKE '%%0%%' LIMIT %u) t\",\n                    t, sysbench.opt.table_size))\n    end\n end\n \n -- Implement parallel prepare and prewarm commands\n sysbench.cmdline.commands = {\n    prepare = {cmd_prepare, sysbench.cmdline.PARALLEL_COMMAND},\n    prewarm = {cmd_prewarm, sysbench.cmdline.PARALLEL_COMMAND}\n }\n \n \n -- Template strings of random digits with 11-digit groups separated by dashes\n \n -- 10 groups, 119 characters\n local c_value_template = \"###########-###########-###########-\" ..\n    \"###########-###########-###########-\" ..\n    \"###########-###########-###########-\" ..\n    \"###########\"\n \n -- 5 groups, 59 characters\n local pad_value_template = \"###########-###########-###########-\" ..\n    \"###########-###########\"\n \n function get_c_value()\n    return sysbench.rand.string(c_value_template)\n end\n \n function get_pad_value()\n    return sysbench.rand.string(pad_value_template)\n end\n \n function create_table(drv, con, table_num)\n    local id_index_def, id_def\n    local engine_def = \"\"\n    local extra_table_options = \"\"\n    local query\n \n    if sysbench.opt.secondary then\n      id_index_def = \"KEY xid\"\n    else\n      id_index_def = \"PRIMARY KEY\"\n    end\n \n    if drv:name() == \"mysql\" or drv:name() == \"attachsql\" or\n       drv:name() == \"drizzle\"\n    then\n       if sysbench.opt.auto_inc then\n          id_def = \"INTEGER NOT NULL AUTO_INCREMENT\"\n       else\n          id_def = \"INTEGER NOT NULL\"\n       end\n       engine_def = \"/*! ENGINE = \" .. sysbench.opt.mysql_storage_engine .. \" */\"\n       extra_table_options = mysql_table_options or \"\"\n    elseif drv:name() == \"pgsql\"\n    then\n       if not sysbench.opt.auto_inc then\n          id_def = \"INTEGER NOT NULL\"\n       elseif pgsql_variant == 'redshift' then\n         id_def = \"INTEGER IDENTITY(1,1)\"\n       else\n         id_def = \"SERIAL\"\n       end\n    else\n       error(\"Unsupported database driver:\" .. drv:name())\n    end\n \n    print(string.format(\"Creating table 'sbtest%d'...\", table_num))\n \n    query = string.format([[\n CREATE TABLE sbtest%d(\n   id %s,\n   k INTEGER DEFAULT '0' NOT NULL,\n   c CHAR(120) DEFAULT '' NOT NULL,\n   pad CHAR(60) DEFAULT '' NOT NULL,\n   %s (id)\n ) %s %s]],\n       table_num, id_def, id_index_def, engine_def, extra_table_options)\n \n    con:query(query)\n \n    if sysbench.opt.create_secondary then\n       print(string.format(\"Creating a secondary index on 'sbtest%d'...\",\n                           table_num))\n       con:query(string.format(\"CREATE INDEX k_%d ON sbtest%d(k)\",\n                               table_num, table_num))\n    end\n \n    if (sysbench.opt.table_size \u003e 0) then\n       print(string.format(\"Inserting %d records into 'sbtest%d'\",\n                           sysbench.opt.table_size, table_num))\n    end\n \n    if sysbench.opt.auto_inc then\n       query = \"INSERT INTO sbtest\" .. table_num .. \"(k, c, pad) VALUES\"\n    else\n       query = \"INSERT INTO sbtest\" .. table_num .. \"(id, k, c, pad) VALUES\"\n    end\n \n    con:bulk_insert_init(query)\n \n    local c_val\n    local pad_val\n \n    for i = 1, sysbench.opt.table_size do\n \n       c_val = get_c_value()\n       pad_val = get_pad_value()\n \n       if (sysbench.opt.auto_inc) then\n          query = string.format(\"(%d, '%s', '%s')\",\n                                sb_rand(1, sysbench.opt.table_size), c_val,\n                                pad_val)\n       else\n          query = string.format(\"(%d, %d, '%s', '%s')\",\n                                i, sb_rand(1, sysbench.opt.table_size), c_val,\n                                pad_val)\n       end\n \n       con:bulk_insert_next(query)\n    end\n \n    con:bulk_insert_done()\n end\n \n local t = sysbench.sql.type\n local stmt_defs = {\n    point_selects = {\n       \"SELECT c FROM sbtest%u WHERE id=?\",\n       t.INT},\n    simple_ranges = {\n       \"SELECT c FROM sbtest%u WHERE id BETWEEN ? AND ?\",\n       t.INT, t.INT},\n    sum_ranges = {\n       \"SELECT SUM(k) FROM sbtest%u WHERE id BETWEEN ? AND ?\",\n        t.INT, t.INT},\n    order_ranges = {\n       \"SELECT c FROM sbtest%u WHERE id BETWEEN ? AND ? ORDER BY c\",\n        t.INT, t.INT},\n    distinct_ranges = {\n       \"SELECT DISTINCT c FROM sbtest%u WHERE id BETWEEN ? AND ? ORDER BY c\",\n       t.INT, t.INT},\n    index_updates = {\n       \"UPDATE sbtest%u SET k=k+1 WHERE id=?\",\n       t.INT},\n    non_index_updates = {\n       \"UPDATE sbtest%u SET c=? WHERE id=?\",\n       {t.CHAR, 120}, t.INT},\n    deletes = {\n       \"DELETE FROM sbtest%u WHERE id=?\",\n       t.INT},\n    inserts = {\n       \"INSERT INTO sbtest%u (id, k, c, pad) VALUES (?, ?, ?, ?)\",\n       t.INT, t.INT, {t.CHAR, 120}, {t.CHAR, 60}},\n }\n \n function prepare_begin()\n    stmt.begin = con:prepare(\"BEGIN\")\n end\n \n function prepare_commit()\n    stmt.commit = con:prepare(\"COMMIT\")\n end\n \n function prepare_for_each_table(key)\n    for t = 1, sysbench.opt.tables do\n       stmt[t][key] = con:prepare(string.format(stmt_defs[key][1], t))\n \n       local nparam = #stmt_defs[key] - 1\n \n       if nparam \u003e 0 then\n          param[t][key] = {}\n       end\n \n       for p = 1, nparam do\n          local btype = stmt_defs[key][p+1]\n          local len\n \n          if type(btype) == \"table\" then\n             len = btype[2]\n             btype = btype[1]\n          end\n          if btype == sysbench.sql.type.VARCHAR or\n             btype == sysbench.sql.type.CHAR then\n                param[t][key][p] = stmt[t][key]:bind_create(btype, len)\n          else\n             param[t][key][p] = stmt[t][key]:bind_create(btype)\n          end\n       end\n \n       if nparam \u003e 0 then\n          stmt[t][key]:bind_param(unpack(param[t][key]))\n       end\n    end\n end\n \n function prepare_point_selects()\n    prepare_for_each_table(\"point_selects\")\n end\n \n function prepare_simple_ranges()\n    prepare_for_each_table(\"simple_ranges\")\n end\n \n function prepare_sum_ranges()\n    prepare_for_each_table(\"sum_ranges\")\n end\n \n function prepare_order_ranges()\n    prepare_for_each_table(\"order_ranges\")\n end\n \n function prepare_distinct_ranges()\n    prepare_for_each_table(\"distinct_ranges\")\n end\n \n function prepare_index_updates()\n    prepare_for_each_table(\"index_updates\")\n end\n \n function prepare_non_index_updates()\n    prepare_for_each_table(\"non_index_updates\")\n end\n \n function prepare_delete_inserts()\n    prepare_for_each_table(\"deletes\")\n    prepare_for_each_table(\"inserts\")\n end\n \n function thread_init()\n    drv = sysbench.sql.driver()\n    con = drv:connect()\n \n    -- Create global nested tables for prepared statements and their\n    -- parameters. We need a statement and a parameter set for each combination\n    -- of connection/table/query\n    stmt = {}\n    param = {}\n \n    for t = 1, sysbench.opt.tables do\n       stmt[t] = {}\n       param[t] = {}\n    end\n \n    -- This function is a 'callback' defined by individual benchmark scripts\n    prepare_statements()\n end\n \n -- Close prepared statements\n function close_statements()\n    for t = 1, sysbench.opt.tables do\n       for k, s in pairs(stmt[t]) do\n          stmt[t][k]:close()\n       end\n    end\n    if (stmt.begin ~= nil) then\n       stmt.begin:close()\n    end\n    if (stmt.commit ~= nil) then\n       stmt.commit:close()\n    end\n end\n \n function thread_done()\n    close_statements()\n    con:disconnect()\n end\n \n function cleanup()\n    local drv = sysbench.sql.driver()\n    local con = drv:connect()\n \n    for i = 1, sysbench.opt.tables do\n       print(string.format(\"Dropping table 'sbtest%d'...\", i))\n       con:query(\"DROP TABLE IF EXISTS sbtest\" .. i )\n    end\n end\n \n local function get_table_num()\n    return sysbench.rand.uniform(1, sysbench.opt.tables)\n end\n \n local function get_id()\n    return sysbench.rand.default(1, sysbench.opt.table_size)\n end\n \n function begin()\n    stmt.begin:execute()\n end\n \n function commit()\n    stmt.commit:execute()\n end\n \n function execute_point_selects()\n    local tnum = get_table_num()\n    local i\n \n    for i = 1, sysbench.opt.point_selects do\n       param[tnum].point_selects[1]:set(get_id())\n \n       stmt[tnum].point_selects:execute()\n    end\n end\n \n local function execute_range(key)\n    local tnum = get_table_num()\n \n    for i = 1, sysbench.opt[key] do\n       local id = get_id()\n \n       param[tnum][key][1]:set(id)\n       param[tnum][key][2]:set(id + sysbench.opt.range_size - 1)\n \n       stmt[tnum][key]:execute()\n    end\n end\n \n function execute_simple_ranges()\n    execute_range(\"simple_ranges\")\n end\n \n function execute_sum_ranges()\n    execute_range(\"sum_ranges\")\n end\n \n function execute_order_ranges()\n    execute_range(\"order_ranges\")\n end\n \n function execute_distinct_ranges()\n    execute_range(\"distinct_ranges\")\n end\n \n function execute_index_updates()\n    local tnum = get_table_num()\n \n    for i = 1, sysbench.opt.index_updates do\n       param[tnum].index_updates[1]:set(get_id())\n \n       stmt[tnum].index_updates:execute()\n    end\n end\n \n function execute_non_index_updates()\n    local tnum = get_table_num()\n \n    for i = 1, sysbench.opt.non_index_updates do\n       param[tnum].non_index_updates[1]:set_rand_str(c_value_template)\n       param[tnum].non_index_updates[2]:set(get_id())\n \n       stmt[tnum].non_index_updates:execute()\n    end\n end\n \n function execute_delete_inserts()\n    local tnum = get_table_num()\n \n    for i = 1, sysbench.opt.delete_inserts do\n       local id = get_id()\n       local k = get_id()\n \n       param[tnum].deletes[1]:set(id)\n \n       param[tnum].inserts[1]:set(id)\n       param[tnum].inserts[2]:set(k)\n       param[tnum].inserts[3]:set_rand_str(c_value_template)\n       param[tnum].inserts[4]:set_rand_str(pad_value_template)\n \n       stmt[tnum].deletes:execute()\n       stmt[tnum].inserts:execute()\n    end\n end\n \n -- Re-prepare statements if we have reconnected, which is possible when some of\n -- the listed error codes are in the --mysql-ignore-errors list\n function sysbench.hooks.before_restart_event(errdesc)\n    if errdesc.sql_errno == 2013 or -- CR_SERVER_LOST\n       errdesc.sql_errno == 2055 or -- CR_SERVER_LOST_EXTENDED\n       errdesc.sql_errno == 2006 or -- CR_SERVER_GONE_ERROR\n       errdesc.sql_errno == 2011    -- CR_TCP_CONNECTION\n    then\n       close_statements()\n       prepare_statements()\n    end\n end",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "/home/jpi/proyecto_tesis/ansible/oltp_common.lua",
            "id": "4e2240728326806554a699e3f2b0c92439fd4d6b",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "oltp_mongo_file",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "-- Copyright (C) 2006-2017 Alexey Kopytov \u003cakopytov@gmail.com\u003e\n\n-- This program is free software; you can redistribute it and/or modify\n-- it under the terms of the GNU General Public License as published by\n-- the Free Software Foundation; either version 2 of the License, or\n-- (at your option) any later version.\n\n-- This program is distributed in the hope that it will be useful,\n-- but WITHOUT ANY WARRANTY; without even the implied warranty of\n-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-- GNU General Public License for more details.\n\n-- You should have received a copy of the GNU General Public License\n-- along with this program; if not, write to the Free Software\n-- Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n\n-- -----------------------------------------------------------------------------\n-- Common code for OLTP benchmarks.\n-- -----------------------------------------------------------------------------\n--\n-- Support for MonogoDB \n-- Copyright (C) 2017 Alexey Stroganov@Percona \u003calexey.stroganov@percona.com\u003e\n--\n\n\n\nfunction mongodb_init()\n\n    mongorover = require(\"mongorover\")\n    mongodb_client = mongorover.MongoClient.new(\"mongodb://\" .. sysbench.opt.mongodb_host .. \n                                                \":\" .. sysbench.opt.mongodb_port..\"/?serverSelectionTryOnce=false\")\n    mongodb_database = mongodb_client:getDatabase(sysbench.opt.mongodb_db)\n \n    conn={}\n    for t = 1, sysbench.opt.tables do\n       conn[t] = mongodb_database:getCollection(\"sbtest\" .. t)\n    end\n end\n \n \n function init()\n    assert(event ~= nil,\n           \"this script is meant to be included by other OLTP scripts and \" ..\n              \"should not be called directly.\")\n \n end\n \n if sysbench.cmdline.command == nil then\n    error(\"Command is required. Supported commands: prepare, prewarm, run, \" ..\n             \"cleanup, help\")\n end\n \n -- Command line options\n sysbench.cmdline.options = {\n    mongodb_db =\n       {\"MongoDB: database name\", \"sbtest_test\"},\n    mongodb_host =\n       {\"MongoDB: hostname\", \"localhost\"},\n    mongodb_port =\n       {\"MongoDB: port\", \"27017\"},\n    table_size =\n       {\"Number of rows per table\", 10000},\n    read_only =\n       {\"Read only workload\", false},\n    range_size =\n       {\"Range size for range SELECT queries\", 100},\n    tables =\n       {\"Number of tables\", 1},\n    point_selects =\n       {\"Number of point SELECT queries per transaction\", 10},\n    simple_ranges =\n       {\"Number of simple range SELECT queries per transaction\", 1},\n    sum_ranges =\n       {\"Number of SELECT SUM() queries per transaction\", 1},\n    order_ranges =\n       {\"Number of SELECT ORDER BY queries per transaction\", 1},\n    distinct_ranges =\n       {\"Number of SELECT DISTINCT queries per transaction\", 1},\n    index_updates =\n       {\"Number of UPDATE index queries per transaction\", 1},\n    non_index_updates =\n       {\"Number of UPDATE non-index queries per transaction\", 1},\n    delete_inserts =\n       {\"Number of DELETE/INSERT combination per transaction\", 1},\n    range_selects =\n       {\"Enable/disable all range SELECT queries\", true},\n    auto_inc =\n    {\"Use AUTO_INCREMENT column as Primary Key (for MySQL), \" ..\n        \"or its alternatives in other DBMS. When disabled, use \" ..\n        \"client-generated IDs\", true},\n    skip_trx =\n       {\"Don't start explicit transactions and execute all queries \" ..\n           \"in the AUTOCOMMIT mode\", false},\n    secondary =\n       {\"Use a secondary index in place of the PRIMARY KEY\", false},\n    create_secondary =\n       {\"Create a secondary index in addition to the PRIMARY KEY\", true}\n }\n \n \n -- Template strings of random digits with 11-digit groups separated by dashes\n    \n -- 10 groups, 119 characters\n local c_value_template = \"###########-###########-###########-\" ..\n    \"###########-###########-###########-\" ..\n    \"###########-###########-###########-\" ..\n    \"###########\"\n \n -- 5 groups, 59 characters\n local pad_value_template = \"###########-###########-###########-\" ..\n    \"###########-###########\"\n \n function get_c_value()\n    return sysbench.rand.string(c_value_template)\n end\n \n function get_pad_value()\n    return sysbench.rand.string(pad_value_template)\n end\n \n function create_table(table_num)\n    local id_index_def, id_def\n    local engine_def = \"\"\n    local extra_table_options = \"\"\n    local query\n \n    if sysbench.opt.secondary then\n      id_index_def = \"KEY xid\"\n    else\n      id_index_def = \"PRIMARY KEY\"\n    end\n \n    print(string.format(\"Creating table 'sbtest%d'...\", table_num))\n \n    print(string.format(\"Inserting %d records into 'sbtest%d'\", sysbench.opt.table_size, table_num))\n \n    local c_val\n    local pad_val\n       \n    for i = 1, sysbench.opt.table_size do\n       \n       c_val = get_c_value()\n       pad_val = get_pad_value()\n       k_val = sb_rand(1, sysbench.opt.table_size)\n       \n       row = { _id = i, k = k_val, c = c_val, pad = pad_val }\n       --print ( \"i: \",i,\"k: \",k_val,\"c: \",c_val,\"pad: \",pad_val)\n       result = conn[table_num]:insert_one(row)\n       --print (result)\n    end      \n \n    if sysbench.opt.create_secondary then\n       print(string.format(\"Creating a secondary index on 'sbtest%d'...\",\n                           table_num))\n \n       mongodb_database:command(\"createIndexes\", \"sbtest\"..table_num , { indexes = {{ key = { k = 1}, name = \"k\"}}})\n    end\n end\n \n -- Prepare the dataset. This command supports parallel execution, i.e. will\n -- benefit from executing with --threads \u003e 1 as long as --tables \u003e 1\n function cmd_prepare()\n \n    mongodb_init()\n    for i = sysbench.tid % sysbench.opt.threads + 1, sysbench.opt.tables,  sysbench.opt.threads do\n      create_table(i)\n    end\n end\n \n function cmd_cleanup()\n \n    mongodb_init()\n    for i = 1, sysbench.opt.tables do\n       print(string.format(\"Dropping table 'sbtest%d'...\", i))\n       conn[i]:drop()\n    end\n end\n \n sysbench.cmdline.commands = {\n    prepare = {cmd_prepare, sysbench.cmdline.PARALLEL_COMMAND},\n    warmup = {cmd_warmup, sysbench.cmdline.PARALLEL_COMMAND},\n    prewarm = {cmd_warmup, sysbench.cmdline.PARALLEL_COMMAND},\n    cleanup = {cmd_cleanup}\n }\n \n \n local function get_table_num()\n    return sysbench.rand.uniform(1, sysbench.opt.tables)\n end\n \n local function get_id()\n    return sysbench.rand.default(1, sysbench.opt.table_size)\n end\n \n function begin()\n end\n \n function commit()\n end\n \n \n function fetch_results(result_set)\n   local result \n   for result in result_set do\n   end\n end\n \n \n function execute_point_selects()\n    local tnum = get_table_num()\n    local i\n \n    for i = 1, sysbench.opt.point_selects do\n       local result\n       local id = get_id()\n       result=conn[tnum]:find_one({_id = id}, {c = 1, _id = 0})\n    end\n end\n \n function execute_simple_ranges()\n    local tnum = get_table_num()\n \n    for i = 1, sysbench.opt[\"simple_ranges\"] do\n       local results\n       local id = get_id()\n       local id_max = id+sysbench.opt.range_size - 1\n       \n       results=conn[tnum]:find({_id = { [\"$gte\"] = id, [\"$lte\"] = id_max }}, { c = 1, _id = 0 })\n       fetch_results(results)      \n    end\n end\n \n function execute_sum_ranges()\n \n    local tnum = get_table_num()\n \n    for i = 1, sysbench.opt[\"sum_ranges\"] do\n       local results\n       local id = get_id()\n       local id_max = id+sysbench.opt.range_size - 1\n     \n       \n       local aggregationPipeline ={ { [\"$match\"] = { _id = { [\"$gte\"] = id, [\"$lte\"] = id_max }}}, \n                                    { [\"$group\"] = { _id = BSONNull.new(), total = { [\"$sum\"] = \"$k\" }}},\n                                    { [\"$project\"] = { _id = 0, total = 1 }} }\n \n       results=conn[tnum]:aggregate(aggregationPipeline)\n       fetch_results(results)\n    end\n end\n \n \n function execute_order_ranges()\n    local tnum = get_table_num()\n \n    for i = 1, sysbench.opt[\"order_ranges\"] do\n       local results\n       local id = get_id()\n       local id_max = id+sysbench.opt.range_size - 1\n       \n       local aggregationPipeline ={ { [\"$match\"] = { _id = { [\"$gte\"] = id, [\"$lte\"] = id_max }}}, \n                                    { [\"$sort\"] = { c = 1 }},\n                                    { [\"$project\"] = { _id = 0, c = 1 }} }\n \n       results=conn[tnum]:aggregate(aggregationPipeline)\n       fetch_results(results)\n    end\n end\n \n function execute_distinct_ranges()\n \n    local tnum = get_table_num()\n \n    for i = 1, sysbench.opt[\"distinct_ranges\"] do\n       local results\n       local id = get_id()\n       local id_max = id+sysbench.opt.range_size - 1\n       \n       local aggregationPipeline = { { [\"$match\"] = { _id = { [\"$gte\"] = id, [\"$lte\"] = id_max }}}, \n                                     { [\"$group\"] = { _id = \"$c\" } }, \n                                     { [\"$sort\"]  = { _id = -1 } } } \n                               \n       results=conn[tnum]:aggregate(aggregationPipeline)\n       fetch_results(results)\n    end\n end\n \n function execute_index_updates()\n    local tnum = get_table_num()\n \n    for i = 1, sysbench.opt.index_updates do\n       local id=get_id()\n       \n       local result = conn[tnum]:update_one({_id = id }, {[\"$inc\"] = {k = 1}})\n    end\n end\n \n function execute_non_index_updates()\n    local tnum = get_table_num()\n \n    for i = 1, sysbench.opt.non_index_updates do\n       local result\n       local id=get_id()\n       local c_val=get_c_value()\n             \n       result = conn[tnum]:update_one({_id = id }, {[\"$set\"] = {c = c_val }})\n \n    end\n end\n \n function execute_delete_inserts()\n    local tnum = get_table_num()\n \n    for i = 1, sysbench.opt.delete_inserts do\n       local result\n       local id = get_id()\n       local k = get_id()\n       local c_val=get_c_value()\n       local pad_val=get_pad_value()\n \n       result = conn[tnum]:delete_one({_id = id})      \n \n       while not pcall(function () mongodb_database:command(\"findAndModify\", \"sbtest\" .. tnum  ,\n                                              { query = { _id= id }, \n                                                update = { [\"$set\"] = { k = k, c=c_val, pad=pad_val} }, \n                                                upsert=\"true\" }) end ) do\n       end\n    end\n end\n \n \n function thread_init(thread_id)\n    mongodb_init()\n end\n \n function event()\n \n    if not sysbench.opt.skip_trx then\n       begin()\n    end\n \n    execute_point_selects()\n    execute_simple_ranges()\n    execute_sum_ranges()\n    execute_order_ranges()\n    execute_distinct_ranges()\n \n    if not sysbench.opt.read_only then \n       execute_index_updates()\n       execute_non_index_updates()\n       execute_delete_inserts()\n    end\n \n    if not sysbench.opt.skip_trx then\n       commit()\n    end\n end",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "/home/jpi/proyecto_tesis/ansible/oltp-mongo.lua",
            "id": "92ebe148346e9932d11a172c59e57b3fc81cae4c",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "ssh_config_file",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "Host mysql\n    HostName ec2-18-216-164-92.us-east-2.compute.amazonaws.com\n    User ubuntu\n    IdentityFile C:\\Users\\jp_gm\\Documentos\\AWS_Credentials\\admin_aws.pem\n\nHost mongodb\n    HostName ec2-18-220-249-0.us-east-2.compute.amazonaws.com\n    User ubuntu\n    IdentityFile C:\\Users\\jp_gm\\Documentos\\AWS_Credentials\\admin_aws.pem\n\nHost tidb\n    HostName ec2-13-58-155-92.us-east-2.compute.amazonaws.com\n    User ubuntu\n    IdentityFile C:\\Users\\jp_gm\\Documentos\\AWS_Credentials\\admin_aws.pem\n\n",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "/mnt/c/Users/jp_gm/.ssh/config",
            "id": "5db002d566d00996ddd0aac1c9fe93efc40f6798",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_instance.mongodb",
            "aws_instance.mysql",
            "aws_instance.tidb"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "tidb_cluster_file",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "# For more information about the format of the tiup cluster topology file, consult\n# https://docs.pingcap.com/tidb/stable/production-deployment-using-tiup#step-3-initialize-cluster-topology-file\n\n# # Global variables are applied to all deployments and used as the default value of\n# # the deployments if a specific deployment value is missing.\nglobal:\n  # # The OS user who runs the tidb cluster.\n  user: \"tidb\"\n  # # SSH port of servers in the managed cluster.\n  ssh_port: 22\n  # # Storage directory for cluster deployment files, startup scripts, and configuration files.\n  deploy_dir: \"/home/ubuntu/.tiup/cluster/tidb-deploy\"\n  # # TiDB Cluster data storage directory\n  data_dir: \"/home/ubuntu/.tiup/cluster/tidb-data\"\n  # # Supported values: \"amd64\", \"arm64\" (default: \"amd64\")\n  arch: \"amd64\"\n\npd_servers:\n  - host: 18.218.198.1\n     \ntidb_servers:\n  - host: 3.21.19.201\n\ntikv_servers:\n  - host: 18.117.245.164\n\nmonitoring_servers:\n  - host: 52.14.33.84\n\ngrafana_servers:\n  - host: 3.133.97.51\n",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "/home/jpi/proyecto_tesis/ansible/cluster.yaml",
            "id": "8a707acc2b43f9b4705dfb3d761b33922f42d5f3",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_instance.grafana_server",
            "aws_instance.monitor_server",
            "aws_instance.pd_server",
            "aws_instance.tidb_server",
            "aws_instance.tikv_server"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "tidb_config_file",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "mysql-host=3.21.19.201\nmysql-port=4000\nmysql-user=root\nmysql-db=tidb_test\ntime=600\nthreads=128\nreport-interval=10\ndb-driver=mysql\n",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "/home/jpi/proyecto_tesis/ansible/config",
            "id": "46190b8e47122bafade6bbe56429f76c698cd9fe",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_instance.tidb_server"
          ]
        }
      ]
    }
  ]
}
